// @ts-nocheck

import "./memory.jswt";
import "../stdlib/math.jswt";

let maxAddr = 65536;
let isInit = false;

function init() {
    // Setup header
    hdrSetSize(0, maxAddr - 8);
    hdrSetFree(0, true);

    // Setup footer
    hdrSetSize(maxAddr - 4, maxAddr - 8);
    hdrSetFree(maxAddr - 4, true);

    isInit = true;
}

/**
 * Grow the heap by the given number of pages
 * @param pages pages to grow the heap by
 */
function extend(pages: i32) {
    let prevFooter = maxAddr - 4;
    let nBytes = pages * 65536;
    
    grow(pages);

    hdrSetSize(maxAddr, nBytes - 8);
    hdrSetFree(maxAddr, true);

    maxAddr = maxAddr + nBytes;
    let footer = maxAddr - 4;
    hdrSetSize(footer, nBytes - 8);
    hdrSetFree(footer, true);

    if (hdrGetFree(prevFooter) != false) {
        let prevSize = hdrGetSize(prevFooter);
        let prevHdr = prevFooter - prevSize - 4;
        hdrSetSize(prevHdr, prevSize + nBytes);
        hdrSetSize(footer, prevSize + nBytes);
    }
}

// read payload_size from header/footer given pointer to header/footer
@inline("")
function hdrGetSize(pointer: i32): i32 {
    return i32Load(pointer) & 0xFFFFFFFC;
}

function hdrSetSize(pointer: i32, n: i32) {
    let size = i32Load(pointer) & 0x00000003;
    i32Store(pointer, size | n);
}

@inline("")
function hdrGetFree(pointer: i32): boolean {
    return i32Load(pointer) & 0x00000001;
}

@inline("")
function hdrSetFree(pointer: i32, isFree: boolean) {
    let alloc = i32Load(pointer) & 0xFFFFFFFE;
    i32Store(pointer, alloc | isFree);
}

function align4(value: i32): i32 {
    let temp = value + 3;
    return temp & 0xFFFFFFFC;
}

// i32.not an valid i32 instruction. So we have to rely on
// an intentional underflow. Discussion here
// https://github.com/WebAssembly/design/issues/379
// https://github.com/WebAssembly/design/issues/701
@wast("(i32.xor (local.get $value) (i32.const -1))")
function i32not(value: i32): i32 { }